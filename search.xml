<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2Fliam%2F2018%2F09%2F03%2Fmysql%E5%AF%BC%E5%87%BA%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[导出所有表结构 $ mysqldump -uuser1 -pBeaconuser1! -d db_smt2&gt; db_smt2.sql]]></content>
  </entry>
  <entry>
    <title><![CDATA[selenium入门之模拟登陆]]></title>
    <url>%2Fliam%2F2018%2F05%2F18%2Fselenium%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[学习爬虫时发现惰性加载的页面抓取起来不方便,然后就发现了这个模块。开始学习之旅-_-(本文基于python3) 安装selenium直接pip安装就好，selenium3 貌似已经不支持phantomjs(可能我安装有问题,不要在意细节…)12$ pip install selenium 下载Chromedriver直接贴网站了——————&gt;地址 下载后放到python目录下就可以了 登陆12345678910options = webdriver.ChromeOptions() options.add_experimental_option(&quot;excludeSwitches&quot;, [&quot;ignore-certificate-errors&quot;]) options.add_argument(&apos;--user-data-dir=C:/Users/liam/AppData/Local/Google/Chrome/User Data/Default&apos;) driver = webdriver.Chrome(chrome_options=options) url = &apos;http://lo/login/&apos; driver.get(url) driver.find_element_by_name(&quot;username&quot;).send_keys(&quot;username&quot;) # 文本框的名字 driver.find_element_by_name(&quot;password&quot;).send_keys(&quot;password&quot;) driver.find_element_by_xpath(&quot;//button[@class=&apos;btn btn-default submitButton&apos;]&quot;).click() time.sleep(5)]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis]]></title>
    <url>%2Fliam%2F2018%2F05%2F16%2Fredis%20%2F</url>
    <content type="text"><![CDATA[redis 安装与基础命令 redis 安装与基础命令 安装下载安装包直接去官网下载就可以了https://redis.io/download 安装12345$ tar xzfv redis-4.0.11.tar.gz$ cd redis-4.0.11$ make 测试是否成功123456789101112131415161718// 开启服务$ cd redis-4.0.11/$ src/redis-server 48050:C 22 Aug 23:47:23.462 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo48050:C 22 Aug 23:47:23.463 # Redis version=4.0.11, bits=64, commit=00000000, modified=0, pid=48050, just started48050:C 22 Aug 23:47:23.463 # Warning: no config file specified, using the default config. In order to specify a config file use src/redis-server /path/to/redis.conf// 连接$ src/redis-cli 127.0.0.1:6379&gt; set (error) ERR wrong number of arguments for &apos;set&apos; command127.0.0.1:6379&gt; set &apos;a&apos; 1OK127.0.0.1:6379&gt; get &apos;a&apos;&quot;1&quot;127.0.0.1:6379&gt; [liam@localhost redis-4.0.11]$ redis 开机自启将redis 的守护进程开启redis/redis.conf123456789101112131415161718$ vi redis/redis.confdis configuration file example.## Note that in order to read the configuration file, Redis must be# started with the file path as first argument:## ./redis-server /path/to/redis.conf# Note on units: when memory size is needed, it is possible to specify# it in the usual form of 1k 5GB 4M and so forth:## 1k =&gt; 1000 bytes# 1kb =&gt; 1024 bytes# 1m =&gt; 1000000 bytes# 1mb =&gt; 1024*1024 bytes# 1g =&gt; 1000000000 bytes# 1gb =&gt; 1024*1024*1024 bytes..... 找到 daemonize 修改成 yes 即可。 在/etc/init.d/ 中新建一个sh脚本redis12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#!/bin/sh# chkconfig: 2345 10 90# description: Start and Stop redisPATH=/usr/local/bin:/sbin:/usr/bin:/binREDISPORT=6379 EXEC=/home/liam/redis-4.0.11/src/redis-serverREDIS_CLI=/home/liam/redis-4.0.11/src/redis-cliPIDFILE=/var/run/redis.pidCONF=&quot;/home/liam/redis-4.0.11/redis.conf&quot;AUTH=&quot;1234&quot; case &quot;$1&quot; in start) if [ -f $PIDFILE ] then echo &quot;$PIDFILE exists, process is already running or crashed.&quot; else echo &quot;Starting Redis server...&quot; $EXEC $CONF fi if [ &quot;$?&quot;=&quot;0&quot; ] then echo &quot;Redis is running...&quot; fi ;; stop) if [ ! -f $PIDFILE ] then echo &quot;$PIDFILE exists, process is not running.&quot; else PID=$(cat $PIDFILE) echo &quot;Stopping...&quot; $REDIS_CLI -p $REDISPORT SHUTDOWN sleep 2 while [ -x $PIDFILE ] do echo &quot;Waiting for Redis to shutdown...&quot; sleep 1 done echo &quot;Redis stopped&quot; fi ;; restart|force-reload) $&#123;0&#125; stop $&#123;0&#125; start ;; *) echo &quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2 exit 1esac 设置自启动1$ chkconfig redis on 重启服务器1$ reboot 查看redis是否运行123$ ps -aux | grep redisroot 536 0.1 0.4 145260 4632 ? Ssl 07:33 0:18 /home/liam/redis-4.0.11/src/redis-server 127.0.0.1:6379root 5765 0.0 0.0 112652 952 pts/0 S+ 10:51 0:00 grep --color=auto redis 配置IP地址将redis.confg 中的 bind 注释,允许外部访问。 redis集群搭建firewall-cmd –zone=public –add-port=6379/tcp –permanent]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 互为主从搭建]]></title>
    <url>%2Fliam%2F2018%2F05%2F16%2Fmysql%E4%B8%BB%E4%B8%BB%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[两台Mysql互相同步、互为主从 本篇基于已经看完主从复制文章基础,再进行下一部分的搭建 配置slave(10.137.4.8)查看master状态123456789$ mysql -pmysql&gt; show master status;+------------------+----------+--------------+---------------------------------------------+-------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+---------------------------------------------+-------------------+| mysql-bin.000001 | 123 | | mysql,information_schema,performance_schema | |+------------------+----------+--------------+---------------------------------------------+-------------------+1 row in set (0.00 sec) master(10.137.4.7)建立主从连接12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970mysql&gt; change master to -&gt; master_host=&apos;10.137.4.8&apos;, -&gt; master_user=&apos;test&apos;, -&gt; master_password=&apos;Liam123!&apos;, -&gt; master_log_file=&apos;mysql-bin.000001&apos;, # 10.137.4.8 master 状态中获取 -&gt; master_log_pos=123; # 10.137.4.8 master 状态中获取 mysql&gt; start slave; # 开启同步mysql&gt; show slave status \G # 查看同步配置信息*************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 10.137.4.8 Master_User: test Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-binlog.000001 Read_Master_Log_Pos: 123 Relay_Log_File: foc-lh-dbs-mysql1-relay-bin.000002 Relay_Log_Pos: 1024 Relay_Master_Log_File: mysql-binlog.000001 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: mysql.%replicate-wild-igno Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 123 Relay_Log_Space: 1243 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 1 Master_UUID: f303ed33-5815-11e8-b557-fa163ee5f93f Master_Info_File: /var/lib/mysql/master.info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: Executed_Gtid_Set: Auto_Position: 0 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 1 row in set (0.01 sec]]></content>
      <categories>
        <category>Mysql集群</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 主从复制配置]]></title>
    <url>%2Fliam%2F2018%2F05%2F16%2Fmysql%E4%B8%BB%E4%BB%8E%2F</url>
    <content type="text"><![CDATA[mysql主(master)从(slave)复制就是一个两个mysql的同步数据的过程，主库更新后会发送更新事件到从库，从库读取更新记录并更新记录。 环境Linux: Centos7Mysql: 5.7master:10.137.4.7slave:10.137.4.8 安装mysql下载mysql这里我下载的是npmMySQL官网下载链接 卸载Linux自带的Mysql先要卸载掉已安装的mysql,不然会报错12345# 查看已安装的mysql$rpm -qa | grep mysql # 如果未返回则没有默认安装mysql-libs-5.1.73-5.el6_6.x86_64# 卸载$yum -y remove mysql-libs 安装需要Common、libs、client、server、devel 五个文件按以上方五个文件的顺序依次安装rpm包,因为包之间的依赖关系。1$rpm -ivh mysql-community-client-5.7.22-1.el7.x86_64.rpm.rpm 这里可能回报错,由于Linux原因有的默认使用的数据库是mariadb(mysql 的一个分支)。按照上方的卸载方法，卸载掉就好了。123456$rpm -ivh mysql-community-client-5.7.22-1.el7.x86_64.rpm.rpmwarning: mysql-community-common-5.7.22-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing... ################################# [100%] file /usr/share/mysql/czech/errmsg.sys from install of mysql-community-common-5.7.22-1.el7.x86_64 conflicts with file from package mariadb-libs-1:5.5.44-2.el7.centos.x86_64 $yum -y remove mariadb-libs-1:5.5.44-2.el7.centos.x86_64 配置关闭防火墙123456789101112131415161718$ firewall-cmd --state ##查看防火墙状态running ##防火墙开启$ systemctl stop firewalld ##关闭防火墙$ firewall-cmd --statenot running ##防火墙关闭$ systemctl start firewalld.service # 开启$ systemctl status firewalld.service #● firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled) Active: active (running) since Tue 2018-05-22 10:15:13 CST; 31min ago Docs: man:firewalld(1) Main PID: 9422 (firewalld) CGroup: /system.slice/firewalld.service └─9422 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid 修改mysql配置文件主从服务器都要配置,server_id为唯一的不可重复1234567891011$vi /etc/my.cnf[mysqld]log-bin=mysql-bin server_id=128binlog-ignore-db = mysqlbinlog-ignore-db = information_schemabinlog-ignore-db = performance_schemareplicate-wild-ignore-table = mysql.%replicate-wild-igno#退出后重启$service mysqld restart 主从复制master(10.137.4.7)创建用户123456789101112131415161718192021222324252627282930#查看临时密码$ grep password /var/log/mysqld.log2018-05-15T05:46:03.804945Z 1 [Note] A temporary password is generated for root@localhost: iAegj2o.4J70#登陆mysql$ mysql -p:iAegj2o.4J70# 修改root密码mysql&gt; set password = password(&quot;Liam123!&quot;);Query OK, 0 rows affected, 1 warning (0.00 sec)# 创建账号mysql&gt; create user &apos;test1&apos;@&apos;10.137.4.8&apos; identified by &apos;Liam123!&apos;;# 赋予 REPLICATION SLAVE 权限mysql&gt; grant replication slave on *.* to &apos;test&apos;@&apos;10.137.4.8&apos;;## 查看用户mysql&gt; select user,host from mysql.user;## 查看 master 状态mysql&gt; show master status;+------------------+----------+--------------+---------------------------------------------+-------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+---------------------------------------------+-------------------+| mysql-bin.000025 | 860 | | mysql,information_schema,performance_schema | |+------------------+----------+--------------+---------------------------------------------+-------------------+1 row in set (0.00 sec) 拷贝master数据1$ mysqldump -u root -p --all-databases --master-data &gt; all.sql slave(10.137.4.8)将all.sql拷贝到 slave 下执行1$ mysql -uroot -p &lt; all.sql 建立主从连接12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970mysql&gt; change master to -&gt; master_host=&apos;10.137.4.7&apos;, -&gt; master_user=&apos;test&apos;, -&gt; master_password=&apos;Liam123!&apos;, -&gt; master_log_file=&apos;mysql-bin.000025&apos;, # 主服务master 状态中获取 -&gt; master_log_pos=860; # 主服务master 状态中获取 mysql&gt; start slave; # 开启同步mysql&gt; show slave status \G # 查看同步配置信息*************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 10.137.4.7 Master_User: test Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-binlog.000025 Read_Master_Log_Pos: 860 Relay_Log_File: foc-lh-dbs-mysql1-relay-bin.000002 Relay_Log_Pos: 1024 Relay_Master_Log_File: mysql-binlog.000025 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: mysql.%replicate-wild-igno Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 860 Relay_Log_Space: 1243 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 1 Master_UUID: f303ed33-5815-11e8-b557-fa163ee5f93f Master_Info_File: /var/lib/mysql/master.info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: Executed_Gtid_Set: Auto_Position: 0 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 1 row in set (0.01 sec ps: Slave_IO_Running,Slave_SQL_Running 都要为Yes,如果错误则查看Last_IO_Error中的错误. 测试检查是否成功。在master下新建库和表，看下是否在slave下出现.]]></content>
      <categories>
        <category>Mysql集群</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 多主一从搭建]]></title>
    <url>%2Fliam%2F2018%2F05%2F16%2Fmysql%E5%A4%9A%E4%B8%BB%E4%B8%80%E4%BB%8E%2F</url>
    <content type="text"><![CDATA[多主一从搭建 按照主主搭建好环境 新增一台Slavemaster:10.137.4.7master:10.137.4.8slave:10.137.4.9 10.137.4.9修改/etc/my.cof12345[mysqld]server-id = 2relay_log_info_repository = TABLEmaster_info_repository = TABLErelay_log_recovery = on 设置mysql master12345mysql&gt; change master to master_host=&apos;10.137.4.7&apos;, master_user=&apos;test&apos;, master_password=&apos;Liam123!&apos;, master_log_file=&apos;mysql-bin.000025&apos;, master_log_pos=860 for channel &apos;master_1&apos;;mysql&gt; change master to master_host=&apos;10.137.4.8&apos;, master_user=&apos;test&apos;, master_password=&apos;Liam123!&apos;, master_log_file=&apos;mysql-bin.000001&apos;, master_log_pos=123 for channel &apos;master_2&apos;;# 查看mysql&gt; select * from mysql.slave_master_info;]]></content>
      <categories>
        <category>Mysql集群</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[superset安装及apache部署]]></title>
    <url>%2Fliam%2F2018%2F05%2F16%2Fsuperset%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[superset安装及apache部署 superset安装及apache部署 安装按照官网教程官网教程需要使用安装虚拟环境，这里直接使用的系统环境 命令执行 pip 安装,等待执行完成就可以了12$ pip install superset.... 安装过程中的的一些错误pydruid模块安装报错pass sals模块安装报错123456789atal error: sasl/sasl.h: No such file ordirectory #include &lt;sasl/sasl.h&gt; ^compilation terminated.error: Setup script exited with error:command &apos;gcc&apos; failed with exit status 1 解决办法：经查发现是没有安装sasl的开发库，所以需要安装下，stackoverflow上说安装一个libsasl2-dev，用yum没找到，然后使用sasl和dev关键字筛选了下，得到了一个libgsasl-devel，然后就装上试了试，就ok了。123$ yum install libgsasl-devel$ yum install cyrus-sasl-devel.x86_64 原文章 部署在python包安装目录找到(/usr/local/python3/lib/python3.4/site-packages/)superset文件夹 添加wsgi文件如果未使用venv 的话,直接加入applicationsuperset.wsgi1from superset import app as application 使用venv 就需要添加虚拟环境地址,activate_this为绝对路径指向虚拟环境(未测试过请参考官方文档)superset.wsgi123activate_this = &apos;/path/to/env/bin/activate_this.py&apos;execfile(activate_this, dict(__file__=activate_this))from superset import app as application 将.wsgi 文件放入superset文件夹 superset默认配置找到项目下 config.py 文件 数据库设置安装mysql依赖1$ pip install mysqlclient 如果安装报错如下且当前环境数据库在使用则,上方写入12345678import pymysql pymysql.install_as_MySQLdb()...SQLALCHEMY_DATABASE_URI = &apos;mysql://cindy:123@10.132.37.36/superset_meta&apos; 文件指向设置启动时apache报错,错误如下123456789[Thu Aug 23 16:19:42.739741 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] mod_wsgi (pid=48137): Target WSGI script &apos;/usr/local/python3/lib/python3.4/site-packages/superset/superset.wsgi&apos; cannot be loaded as Python module.[Thu Aug 23 16:19:42.739885 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] mod_wsgi (pid=48137): Exception occurred processing WSGI script &apos;/usr/local/python3/lib/python3.4/site-packages/superset/superset.wsgi&apos;.[Thu Aug 23 16:19:42.739982 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] Traceback (most recent call last):[Thu Aug 23 16:19:42.740095 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] File &quot;/usr/local/python3/lib/python3.4/site-packages/superset/superset.wsgi&quot;, line 1, in &lt;module&gt;[Thu Aug 23 16:19:42.740122 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] from superset import app as application[Thu Aug 23 16:19:42.740193 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] File &quot;/usr/local/python3/lib/python3.4/site-packages/superset/__init__.py&quot;, line 31, in &lt;module&gt;[Thu Aug 23 16:19:42.740216 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] os.makedirs(config.DATA_DIR)[Thu Aug 23 16:19:42.740280 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] File &quot;/usr/local/python3/lib/python3.4/os.py&quot;, line 237, in makedirs[Thu Aug 23 16:19:42.740302 2018] [wsgi:error] [pid 48137:tid 140391455381248] [remote 10.167.198.76:15717] mkdir(name, mode) 文件夹无法创建,将文件路径修改如下12345if &apos;SUPERSET_HOME&apos; in os.environ: DATA_DIR = os.environ[&apos;SUPERSET_HOME&apos;]else: DATA_DIR = os.path.join(os.path.expanduser(&apos;~&apos;), &apos;.superset&apos;) DATA_DIR = os.path.join(&apos;/usr/local/python3/lib/python3.4/site-packages/superset&apos;, &apos;.superset&apos;) apache配置开通端口httpd.conf1234567891011121314&lt;VirtualHost *:9099&gt; ServerName 10.129.4.83 WSGIDaemonProcess superset threads=5 WSGIScriptAlias / /usr/local/python3/lib/python3.4/site-packages/superset/superset.wsgi DocumentRoot /usr/local/python3/lib/python3.4/site-packages/superset &lt;Directory /usr/local/python3/lib/python3.4/site-packages&gt; WSGIProcessGroup superset WSGIApplicationGroup %&#123;GLOBAL&#125; WSGIScriptReloading On Order deny,allow Allow from all &lt;/Directory&gt;&lt;/VirtualHost&gt; 重启apache 初始化数据库(venv) [hadoop@cassandra01 venv]$ superset db upgrade 加载一些数据到sqlite数据库中进行展示(venv) [hadoop@cassandra01 venv]$ superset load_examples 初始化superset(venv) [hadoop@cassandra01 venv]$ superset init]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy 碰壁汇总]]></title>
    <url>%2Fliam%2F2018%2F05%2F16%2Fscrapy%2F</url>
    <content type="text"><![CDATA[本文是汇总Scrapy安装到使用碰到的问题和解决方案。 Twisted包报错问题版本及系统问题导致Twisted无法安装12345678910$ pip install scrapy....rds\xish running build_ext building &apos;twisted.test.raiser&apos; extension error: Microsoft Visual C++ 10.0 is required (Unable to find vcvarsall.bat). ---------------------------------------- Failed building wheel for Twisted Running setup.py clean for Twisted 解决方案去python 第三方包的网站python包手动安装,64位的windows下载64位的包可能还是会报错，可以下载32位的包尝试下(我下的:Twisted-18.4.0-cp34-cp34m-win32.whl) 未设置代理问题因为网络受限无法访问到页面，导致无法爬取页面信息12018-05-19 16:28:53 [scrapy.core.scraper] ERROR: Error downloading &lt;GET https://www.jianshu.com/&gt;: Could not open CONNECT tunnel with proxy 10.191.131.156:3128 [&#123;&apos;status&apos;: 407, &apos;reason&apos;: b&apos;Proxy Authentication Required&apos;&#125;] 解决方案给项目添加代理 编辑middlewares.py,新增下方代码12345678class MyProxiesSpiderMiddleware(object): &quot;&quot;&quot; 代理 &quot;&quot;&quot; def process_request(self, request, spider): request.meta[&quot;proxy&quot;] = &apos;你的代理&apos; settings.py 文件中,新增下方代码1234567# 模拟浏览器访问USER_AGENT = &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&apos;# 数字貌似跟执行顺序有关DOWNLOADER_MIDDLEWARES = &#123; &apos;tutorial.middlewares.MyProxiesSpiderMiddleware&apos;: 543,&#125; 从新执行1234567&gt; scrapy crawl dmoz....2018-05-19 17:10:09 [scrapy.core.engine] INFO: Spider opened2018-05-19 17:10:09 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)2018-05-19 17:10:09 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:60232018-05-19 17:10:10 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://www.jianshu.com/&gt; (referer: None)... 访问成功！ ps: requests模块代理报错123456789&gt; import requests&gt; img_url = &apos;https://cdn2.jianshu.io/assets/web/nav-logo-4c7bbafe27adc892f3046e6978459bac.png&apos;&gt; requests.get(img_url)requests.exceptions.ConnectionError: HTTPSConnectionPool(host=&apos;cdn2.jianshu.io&apos;, port=443): Max retries exceeded with url: /assets/web/nav-logo-4c7bbafe27adc892f3046e6978459bac.png (Caused by NewConnectionError(&apos;&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x0399F870&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))# 添加代理&gt; proxies = &#123;&apos;http&apos;: &apos;x.x.x.x&apos;,&apos;https&apos;: &apos;x.x.x.x&apos;&#125;&gt; requests.get(url=img_url,proxies=proxies)&lt;Response [200]&gt;]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发环境搭建]]></title>
    <url>%2Fliam%2F2018%2F05%2F04%2Flinux%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[#]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[數據處理函數及模塊]]></title>
    <url>%2Fliam%2F2018%2F01%2F02%2F%E6%A8%A1%E5%A1%8A%2F</url>
    <content type="text"><![CDATA[記錄一些模塊使用方法 heapq 模塊具體作用不知道，可用於列表值的大小排序同sorted方法,sort方法 sorted,sort 用法sort直接改變列表，sorted 重新生成123456789101112# List按小到大排序result = [2, 1, 3, 5, 6, 4]sor = sorted(result)&gt;&gt; [1, 2, 3, 4, 5, 6]result.sort()&gt;&gt; [1, 2, 3, 4, 5, 6]# 從大到小排序x = sorted(result, reverse=True)&gt;&gt; [6, 5, 4, 3, 2, 1]result.sort(reverse=True)&gt;&gt; [6, 5, 4, 3, 2, 1] 使用heapqheapq 模块有两个函数：nlargest() 和 nsmallest()123456789import heapq#nlargest(n, iterable, key=None)nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]# 查找数据集中的n个最大元素heapq.nlargest(3, nums) &gt;&gt; [42, 37, 23]# 查找数据集中的n个最小元素heapq.nsmallest(3, nums)&gt;&gt; [-4, 1, 2] collections 模塊defaultdict這裡是函數的詳情 会自动为将要访问的键（就算目前字典中并不存在这样的键）创建映射实体這樣就不會報出 KeyError:1234import collectionsd = collections.defaultdict(list)d['1'].append(1)&gt;&gt; defaultdict(&lt;class 'int'&gt;, &#123;'1': [1]&#125;) setdefault這裡是函數的詳情 給不存在的鍵設置一個默認值,不會改變已有鍵1234567891011d = &#123;&#125;d.setdefault('a', [])&gt;&gt; &#123;'a': []&#125;d['z'] = ''d.setdefault('z', [])&gt;&gt; &#123;'1': ''&#125;d = defaultdict(list)for key, value in pairs: d[key].append(value) Counter統計序列中出現次數最多的元素1234import rewith open('C:/Users/F1330292/Desktop/e.txt') as f: word = collections.Counter(re.findall('\w+', f.read())) word.most_common(5)]]></content>
      <categories>
        <category>工作問題</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[offset-aware与offset-navie轉換]]></title>
    <url>%2Fliam%2F2017%2F10%2F19%2F%E8%BD%89%E6%8F%9B%2F</url>
    <content type="text"><![CDATA[使用python的datetime做時間比較時，報錯1TypeError: can&apos;t compare offset-naive and offset-aware datetimes 这是因为两个时间不属于同一类型，offset-naive是不含时区的类型，而offset-aware是有时区类型，两者自然不能比较。 tzinfo 屬性我们可以通过判断datetime对象的tzinfo属性，来获悉他是何种类型1234567891011Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import datetime&gt;&gt;&gt; now = datetime.datetime.now()&gt;&gt;&gt; nowdatetime.datetime(2017, 10, 19, 15, 55, 9, 457974)&gt;&gt;&gt; now.tzinfo&gt;&gt;&gt; now.tzinfo == NoneTrue&gt;&gt;&gt; tzinfo == None 為True時datetime為offset-naive，就是一個不含時區的datetime tzinfo轉換將offset-naive 轉換為 offset-aware123456789&gt;&gt;&gt; import pytz&gt;&gt;&gt; now = now.replace(tzinfo=pytz.timezone('UTC'))&gt;&gt;&gt; nowdatetime.datetime(2017, 10, 19, 15, 55, 9, 457974, tzinfo=&lt;UTC&gt;)&gt;&gt;&gt; now.tzinfo == NoneFalse&gt;&gt;&gt; now.tzinfo&lt;UTC&gt;&gt;&gt;&gt; offset-aware 轉換 offset-naive12345678&gt;&gt;&gt; import pytz&gt;&gt;&gt; now = now.replace(tzinfo=None)&gt;&gt;&gt; nowdatetime.datetime(2017, 10, 19, 15, 55, 9, 457974)&gt;&gt;&gt; now.tzinfo == NoneTrue&gt;&gt;&gt; now.tzinfo&gt;&gt;&gt;]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2Fliam%2F2017%2F10%2F19%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Git是目前世界上最先進的分佈式版本控制系統。在這記錄一些平時經常能用到的一些git命令 Git常用操作命令： 远程仓库相关命令检出仓库：$ git clone git://github.com/jquery/jquery.git 查看远程仓库：$ git remote -v 添加远程仓库：$ git remote add [name] [url] 删除远程仓库：$ git remote rm [name] 修改远程仓库：$ git remote set-url –push [name] [newUrl] 拉取远程仓库：$ git pull [remoteName] [localBranchName] 推送远程仓库：$ git push [remoteName] [localBranchName] *如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下： $git push origin test:master // 提交本地test分支作为远程的master分支 $git push origin test:test // 提交本地test分支作为远程的test分支 分支(branch)操作相关命令查看本地分支：$ git branch 查看远程分支：$ git branch -r 创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支 切换分支：$ git checkout [name] 创建新分支并立即切换到新分支：$ git checkout -b [name] 删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项 合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并 创建远程分支(本地分支push到远程)：$ git push origin [name] 删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] *创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔) $git symbolic-ref HEAD refs/heads/[name] $rm .git/index $git clean -fdx 版本(tag)操作相关命令查看版本：$ git tag 创建版本：$ git tag [name] 删除版本：$ git tag -d [name] 查看远程版本：$ git tag -r 创建远程版本(本地版本push到远程)：$ git push origin [name] 删除远程版本：$ git push origin :refs/tags/[name] 合并远程仓库的tag到本地：$ git pull origin –tags 上传本地tag到远程仓库：$ git push origin –tags 创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’ 子模块(submodule)相关操作命令添加子模块：$ git submodule add [url] [path] 如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs 初始化子模块：$ git submodule init —-只在首次检出仓库时运行一次就行 更新子模块：$ git submodule update —-每次更新或切换分支后都需要运行一下 删除子模块：（分4步走哦） 1) $ git rm –cached [path] 2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉 3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉 4) 手动删除子模块残留的目录 忽略一些文件、文件夹不提交在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如 target bin *.db ===================== Git 常用命令 git branch 查看本地所有分支git status 查看当前状态git commit 提交git branch -a 查看所有的分支git branch -r 查看本地所有分支git commit -am “init” 提交并且加注释git remote add origin git@192.168.1.119:ndshowgit push origin master 将文件给推到服务器上git remote show origin 显示远程库origin里的资源git push origin master:developgit push origin master:hb-dev 将本地库与服务器上的库进行关联git checkout –track origin/dev 切换到远程dev分支git branch -D master develop 删除本地库developgit checkout -b dev 建立一个新的本地分支devgit merge origin/dev 将分支dev与当前分支进行合并git checkout dev 切换到本地dev分支git remote show 查看远程库git add .git rm 文件名(包括路径) 从git中删除指定文件git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来git config –list 看所有用户git ls-files 看已经被提交的git rm [file name] 删除一个文件git commit -a 提交当前repos的所有的改变git add [file name] 添加一个文件到git indexgit commit -v 当你用－v参数的时候可以看commit的差异git commit -m “This is the message describing the commit” 添加commit信息git commit -a -a是代表add，把所有的change加到git index里然后再commitgit commit -a -v 一般提交命令git log 看你commit的日志git diff 查看尚未暂存的更新git rm a.a 移除文件(从暂存区和工作区中删除)git rm –cached a.a 移除文件(只从暂存区中删除)git commit -m “remove” 移除文件(从Git中删除)git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)git diff –cached 或 $ git diff –staged 查看尚未提交的更新git stash push 将文件给push到一个临时空间中 git stash pop 将文件从临时空间pop下来git remote add origin git@github.com:username/Hello-World.git git push origin master 将本地项目给提交到服务器中git pull 本地与服务器端同步git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。 git push origin serverfix:awesomebranchgit fetch 相当于是从远程获取最新版本到本地，不会自动mergegit commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：git branch branch_0.1 master 从主分支master创建branch_0.1分支git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0git checkout branch_1.0/master 切换到branch_1.0/master分支du -hs mkdir WebAppcd WebAppgit inittouch READMEgit add READMEgit commit -m ‘first commit’git remote add origin git@github.com:daixu/WebApp.gitgit push -u origin master 轉自CSDNGit 常用命令 參考Git 基礎]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python安裝Oracle]]></title>
    <url>%2Fliam%2F2017%2F10%2F18%2FPython%E5%AE%89%E8%A3%9DOracle%2F</url>
    <content type="text"><![CDATA[安裝oracle并使用 Navicat 鏈接oracle 安裝oracle客戶端下載及解壓下載三個安裝包，解壓到E://Oracle/instantclient_12_1中(貌似直接解壓到Oracle就可以了，Oracle目錄需要新建)instantclient-basic-windows.x64-12.1.0.2.0.zipinstantclient-sdk-windows.x64-12.1.0.2.0.zipinstantclient-sqlplus-windows.x64-12.1.0.2.0.zip 添加環境變量及配置文件選擇在上方目錄基礎下新建E://Oracle/network/admin 設置環境變量新增系統環境變量NLS_LANG = AMERICAN_AMERICA.ZHS16GBKTNS_ADMIN = E:\Oracle\network\adminLD_LIBRARY_PATH = E:\Oracle\instantclient_12_1SQLPATH = E:\Oracle\instantclient_12_1追加系統環境變量Path变量结尾加上E:\Oracle\instantclient_12_1 配置文件編寫在admin 目錄下新建一個 tnsnames.ora 的文件編譯文件,按下方格式添加數據庫連接信息（按格式追加就行）123456789NSD01 = #連接名 (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 10.132.48.70)(PORT = 1903)) ) (CONNECT_DATA = (SERVICE_NAME = nsd01) ) ) python 安裝oraclewindows + R cmd 直接pip install cx-Oracle就好了 不會請百度pip list 查看是否安裝12345C:\Users\Administrator&gt;pip listcassandra-driver (3.11.0)certifi (2017.7.27.1)chardet (3.0.4)cx-Oracle (6.0.2) 測試是否有用cmd 命令下 python123456789101112C:\Users\Administrator&gt;pythonPython 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)] on win32Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import cx_oracleTraceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ImportError: No module named &apos;cx_oracle&apos;&gt;&gt;&gt; import cx_Oracle&gt;&gt;&gt; db = cx_Oracle.connect(&apos;ipcbuuser/ipcbutest@10.142.149.5:1903/SEBUODB&apos;)&gt;&gt;&gt; print (db.version)&gt;&gt;&gt; Navicat連接oracle安裝完成后直接填寫好數據庫信息點擊連接測試,正常情況下應該是連接成功出現上方問題是應為oci文件不版本不符，根據網上的解決方案是去安裝oracle的文件夾下找到oci文件替換然後就出現這個問題，貌似是這個軟件不支持 64位的oracle oci文件 ，所以要去官網下載一個該版本的32位的instantclient-basic-nt-12.1.0.2.0.zip解壓到任意位置將 軟件的oci文件讀取指向該文件夾就好了]]></content>
      <categories>
        <category>工作問題</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定義異常]]></title>
    <url>%2Fliam%2F2017%2F06%2F12%2F%E8%87%AA%E5%AE%9A%E7%BE%A9%E7%95%B0%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[自定義異常 異常try except通常異常使用是123456try: int('sss')except Exception as e: print('這是一個簡單的異常,異常為:'+str(e))output:這是一個簡單的異常,異常為:invalid literal for int() with base 10: 'sss' finally升級版123456789try: int('sss')except Exception as e: print('這是一個簡單的異常,異常為:'+str(e))finally: print('這裡是最后')output:這是一個簡單的異常,異常為:invalid literal for int() with base 10: 'sss'output:這裡是最后 try else沒有發生異常時觸發123456789101112try: int('1')except Exception as e: print('這是一個簡單的異常,異常為:'+str(e))else: print('沒有異常')finally: print('這裡是最后') output：1output：沒有異常output：這裡是最后 raise返回一個異常123456789101112try: if 1: raise EOFError()except Exception as e: print('這是一個簡單的異常,異常為:'+str(e))else: print('沒有異常')finally: print('這裡是最后') output：這是一個簡單的異常,異常為:output：這裡是最后 自定義異常類創建異常類12345678#繼承Exception類class WeError(Exception): """ 自定義異常 """ def __init__(self,data): Exception.__init__(self,data) #初始化父類 self.data = data 調用定義的異常類12345678910try: if 1: raise WeError('出錯了')except Exception as e: print(str(e))finally: print('結束了') output:出錯了output:結束了]]></content>
      <categories>
        <category>工作問題</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取本月日期]]></title>
    <url>%2Fliam%2F2017%2F06%2F09%2F%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[获取本月的所有日期 获取本月日期获取本月一号的时间12345import datetimetoDay = datetime.date.today() #获取当前日期day = toDay.replace(year=2017,month=1,day=1) # 获取2017-1-1thisDay = toDay.replace(day=1) # 获取本月一号 获取本月月底日期12date = datetime.date.today().replace(month=toDay.month+1,day=1) #下個月一號lastDay = date-datetime.timedelta(1) # 下個月一號 減一天 日期列表1234567891011toDay = dt.date.today() #獲取日期if toDay.month &lt; 12: #如果當前月份等於 12 則需要將年加一 monthLastDay = toDay.replace(month=toDay.month+1,day=1) - dt.timedelta(1) # 獲取下個月減一天else: monthLastDay = toDay.replace(year=toDay.year+1,month=1,day=1) -dt.timedelta(1) # 獲取明年一月一號 減一天thisMonth = toDay.replace(day=1) #獲取本月一號dayList = []for i in range(monthLastDay.day): if thisMonth &lt;= monthLastDay: dayList.append(thisMonth) thisMonth += dt.timedelta(1) dateutilfrom dateutil.relativedelta import relativedelta]]></content>
      <categories>
        <category>工作問題</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[跨域問題解決]]></title>
    <url>%2Fliam%2F2017%2F06%2F07%2F%E8%B7%A8%E5%9F%9F%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%2F</url>
    <content type="text"><![CDATA[今天前后台数据对接的时候，使用put方法是出现了跨域的错误，忙活了好一阵 解决跨域时会先发送一个options请求解决方案安装django-cors-header1pip install django-cors-header 配置settin.py 文件123456789101112131415161718192021222324252627282930313233343536373839404142INSTALLED_APPS = [ ... 'corsheaders'， ... ] MIDDLEWARE_CLASSES = ( ... 'corsheaders.middleware.CorsMiddleware', 'django.middleware.common.CommonMiddleware', # 注意顺序 ...)#跨域增加忽略CORS_ALLOW_CREDENTIALS = TrueCORS_ORIGIN_ALLOW_ALL = TrueCORS_ORIGIN_WHITELIST = ( '*')CORS_ALLOW_METHODS = ( 'DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'VIEW',)CORS_ALLOW_HEADERS = ( 'XMLHttpRequest', 'X_FILENAME', 'accept-encoding', 'authorization', 'content-type', 'dnt', 'origin', 'user-agent', 'x-csrftoken', 'x-requested-with', 'Pragma',) 其他方式使用JSONP使用Ajax获取json数据时，存在跨域的限制。不过，在Web页面上调用js的script脚本文件时却不受跨域的影响，JSONP就是利用这个来实现跨域的传输。因此，我们需要将Ajax调用中的dataType从JSON改为JSONP（相应的API也需要支持JSONP）格式。JSONP只能用于GET请求。 直接修改Django中的views.py文件修改views.py中对应API的实现函数，允许其他域通过Ajax请求数据：1234567def myview(_request): response = HttpResponse(json.dumps(&#123;“key”: “value”, “key2”: “value”&#125;)) response[“Access-Control-Allow-Origin”] = “*” response[“Access-Control-Allow-Methods”] = “POST, GET, OPTIONS” response[“Access-Control-Max-Age”] = “1000” response[“Access-Control-Allow-Headers”] = “*” return response 來源: 博客]]></content>
      <categories>
        <category>工作問題</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2Fliam%2F2017%2F06%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[新建一个Hexo next 样式的博客http://tool.lu/http://tool.lu/favicon/ 添加标签页前面通过修改next主题下的_config.yml文件中的menu选项，可以在主页面的菜单栏添加标签选项，但是此时点击标签，跳转的页面会显示page not found。添加标签页面的具体方法是：1$hexo new page tags 添加文章打開 Git Bash，進入blog 所在文件夾12$hexo new [时间处理] #新建名為`時間處理`的文章INFO Created: D:\Program Files\blog\source\_posts\时间处理.md #反饋信息文章目錄]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
</search>
